{"version":3,"file":"static/js/1759.24f56cc6.chunk.js","mappings":"wJAAA,MAAkBA,EAAH,EAAcC,KAAKC,GAAaC,EAAO,GCG/C,MAAMC,EACTC,IAAAA,CAAKC,GAAM,IAAAC,EACP,MAAM,QAAEC,EAAO,SAAEC,EAAQ,OAAEC,GAAWJ,GDGvC,SAAqBE,EAASG,EAAMD,GAEvC,IAAIE,EAAKD,EADM,GACQE,EAAKF,EADD,GAE3B,MAAMG,EAAMH,EAAKI,OACjBP,EAAQQ,QAAQJ,EAAGK,EAAIJ,EAAGI,GAAKd,GAAOS,EAAGM,EAAIL,EAAGK,GAAKf,GACrD,IAAK,IAAIgB,EAAI,EAAGA,GAAKL,EAAKK,IACtBP,EAAKC,EACLA,EAAKF,GAAMQ,EAN2B,GAMVL,GAC5BN,EAAQY,MAAMR,EAAGK,EAAGL,EAAGM,GAAIN,EAAGK,EAAIJ,EAAGI,GAAKd,GAAOS,EAAGM,EAAIL,EAAGK,GAAKf,EAAMO,EAE9E,CCZQW,CAAYb,EDLb,SAAiBc,EAAOZ,GAA+B,IAAvBa,EAAGC,UAAAT,OAAA,QAAAU,IAAAD,UAAA,GAAAA,UAAA,GADmC,EAEzE,MAAME,EAAO1B,EAAWsB,EAAOX,EAAO,GACtC,IAAK,IAAIQ,EAAI,EAAGA,EAAIG,EAAOH,IACvBR,EAAKgB,KAAK,CAAEV,EAAGhB,KAAK2B,IAAIT,EAAIO,EAAOH,GAAOb,EAAQQ,EAAGjB,KAAK4B,IAAIV,EAAIO,EAAOH,GAAOb,IAEpF,OAAOC,CACX,CCD6BmB,CAAQrB,EAASa,MAAOZ,GAA8B,QAAvBH,EAAEE,EAASsB,oBAAY,IAAAxB,EAAAA,EAJ3C,EAKpC,CACAyB,aAAAA,CAAcvB,GAAU,IAAAwB,EACpB,MAAMC,EAAiBzB,EAAS0B,UAChC,OAAOlC,KAAKmC,OAAMC,EAAAA,EAAAA,IAAmC,QAAtBJ,EAAe,OAAdC,QAAc,IAAdA,OAAc,EAAdA,EAAgBZ,aAAK,IAAAW,EAAAA,EARxC,GASjB,CACAK,YAAAA,CAAaC,EAAW9B,GAAU,IAAA+B,EAC9B,MAAML,EAAY1B,EAAS0B,UAC3B1B,EAASsB,aACL9B,KAAKmC,OAAMC,EAAAA,EAAAA,IAA+B,QAAlBG,EAAU,OAATL,QAAS,IAATA,OAAS,EAATA,EAAWzB,cAAM,IAAA8B,EAAAA,EAbjC,IAasDD,EAAUE,OAAOC,UACxF,E","sources":["../node_modules/.pnpm/@tsparticles+shape-rounded-polygon@3.3.0/node_modules/@tsparticles/shape-rounded-polygon/browser/Utils.js","../node_modules/.pnpm/@tsparticles+shape-rounded-polygon@3.3.0/node_modules/@tsparticles/shape-rounded-polygon/browser/RoundedPolygonDrawer.js"],"sourcesContent":["const double = 2, doublePI = Math.PI * double, half = 0.5, defaultRotation = 0;\nexport function polygon(sides, radius, rot = defaultRotation) {\n    const step = doublePI / sides, path = [];\n    for (let i = 0; i < sides; i++) {\n        path.push({ x: Math.cos(i * step + rot) * radius, y: Math.sin(i * step + rot) * radius });\n    }\n    return path;\n}\nexport function roundedPath(context, path, radius) {\n    const index1 = 0, index2 = 1, increment = 1;\n    let p1 = path[index1], p2 = path[index2];\n    const len = path.length;\n    context.moveTo((p1.x + p2.x) * half, (p1.y + p2.y) * half);\n    for (let i = 1; i <= len; i++) {\n        p1 = p2;\n        p2 = path[(i + increment) % len];\n        context.arcTo(p1.x, p1.y, (p1.x + p2.x) * half, (p1.y + p2.y) * half, radius);\n    }\n}\n","import { getRangeValue, } from \"@tsparticles/engine\";\nimport { polygon, roundedPath } from \"./Utils.js\";\nconst defaultSides = 5, defaultRadius = 5;\nexport class RoundedPolygonDrawer {\n    draw(data) {\n        const { context, particle, radius } = data;\n        roundedPath(context, polygon(particle.sides, radius), particle.borderRadius ?? defaultRadius);\n    }\n    getSidesCount(particle) {\n        const roundedPolygon = particle.shapeData;\n        return Math.round(getRangeValue(roundedPolygon?.sides ?? defaultSides));\n    }\n    particleInit(container, particle) {\n        const shapeData = particle.shapeData;\n        particle.borderRadius =\n            Math.round(getRangeValue(shapeData?.radius ?? defaultSides)) * container.retina.pixelRatio;\n    }\n}\n"],"names":["doublePI","Math","PI","half","RoundedPolygonDrawer","draw","data","_particle$borderRadiu","context","particle","radius","path","p1","p2","len","length","moveTo","x","y","i","arcTo","roundedPath","sides","rot","arguments","undefined","step","push","cos","sin","polygon","borderRadius","getSidesCount","_roundedPolygon$sides","roundedPolygon","shapeData","round","getRangeValue","particleInit","container","_shapeData$radius","retina","pixelRatio"],"sourceRoot":""}