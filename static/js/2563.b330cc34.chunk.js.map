{"version":3,"file":"static/js/2563.b330cc34.chunk.js","mappings":"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","sources":["../node_modules/.pnpm/@tsparticles+path-simplex-noise@3.3.0/node_modules/@tsparticles/path-simplex-noise/browser/SimplexNoiseGenerator.js"],"sourcesContent":["import { Vector, deepExtend, getRandom, } from \"@tsparticles/engine\";\nimport { SimplexNoise } from \"@tsparticles/simplex-noise\";\nconst defaultOptions = {\n    size: 20,\n    increment: 0.004,\n    columns: 0,\n    rows: 0,\n    layers: 0,\n    width: 0,\n    height: 0,\n    offset: {\n        x: 40000,\n        y: 40000,\n        z: 40000,\n    },\n};\nexport class SimplexNoiseGenerator {\n    constructor() {\n        const simplex = new SimplexNoise();\n        this._simplex = simplex.noise4d;\n        this.field = [];\n        this.noiseW = 0;\n        this.options = deepExtend({}, defaultOptions);\n    }\n    generate(particle) {\n        const pos = particle.getPosition(), point = {\n            x: Math.max(Math.floor(pos.x / this.options.size), 0),\n            y: Math.max(Math.floor(pos.y / this.options.size), 0),\n            z: Math.max(Math.floor(pos.z / this.options.size), 0),\n        }, v = Vector.origin;\n        if (!this.field?.[point.x]?.[point.y]?.[point.z]) {\n            return v;\n        }\n        v.setTo(this.field[point.x][point.y][point.z]);\n        return v;\n    }\n    init(container) {\n        this.container = container;\n        this._setup();\n    }\n    reset() {\n    }\n    update() {\n        if (!this.container) {\n            return;\n        }\n        this._calculateField();\n        this.noiseW += this.options.increment;\n    }\n    _calculateField() {\n        const options = this.options;\n        for (let x = 0; x < options.columns; x++) {\n            for (let y = 0; y < options.rows; y++) {\n                for (let z = 0; z < options.layers; z++) {\n                    this.field[x][y][z].angle = this._simplex.noise(x / 50, y / 50, z / 50, this.noiseW) * Math.PI * 2;\n                    this.field[x][y][z].length = this._simplex.noise(x / 100 + options.offset.x, y / 100 + options.offset.y, z / 100 + options.offset.z, this.noiseW);\n                }\n            }\n        }\n    }\n    _initField() {\n        this.field = new Array(this.options.columns);\n        for (let x = 0; x < this.options.columns; x++) {\n            this.field[x] = new Array(this.options.rows);\n            for (let y = 0; y < this.options.rows; y++) {\n                this.field[x][y] = new Array(this.options.layers);\n                for (let z = 0; z < this.options.layers; z++) {\n                    this.field[x][y][z] = Vector.origin;\n                }\n            }\n        }\n    }\n    _resetField() {\n        const container = this.container;\n        if (!container) {\n            return;\n        }\n        const sourceOptions = container.actualOptions.particles.move.path.options;\n        this.options.size = sourceOptions.size > 0 ? sourceOptions.size : defaultOptions.size;\n        this.options.increment =\n            sourceOptions.increment > 0 ? sourceOptions.increment : defaultOptions.increment;\n        this.options.width = container.canvas.size.width;\n        this.options.height = container.canvas.size.height;\n        const offset = sourceOptions.offset;\n        this.options.offset.x = offset?.x ?? defaultOptions.offset.x;\n        this.options.offset.y = offset?.y ?? defaultOptions.offset.y;\n        this.options.offset.z = offset?.z ?? defaultOptions.offset.z;\n        this.options.seed = sourceOptions.seed ?? defaultOptions.seed;\n        this._simplex.seed(this.options.seed ?? getRandom());\n        this.options.columns = Math.floor(this.options.width / this.options.size) + 1;\n        this.options.rows = Math.floor(this.options.height / this.options.size) + 1;\n        this.options.layers = Math.floor(container.zLayers / this.options.size) + 1;\n        this._initField();\n    }\n    _setup() {\n        this.noiseW = 0;\n        this._resetField();\n        addEventListener(\"resize\", () => this._resetField());\n    }\n}\n"],"names":["defaultOptions","size","increment","columns","rows","layers","width","height","offset","x","y","z","SimplexNoiseGenerator","constructor","simplex","SimplexNoise","this","_simplex","noise4d","field","noiseW","options","deepExtend","generate","particle","_this$field","pos","getPosition","point","Math","max","floor","v","Vector","origin","setTo","init","container","_setup","reset","update","_calculateField","angle","noise","PI","length","_initField","Array","_resetField","_offset$x","_offset$y","_offset$z","_sourceOptions$seed","_this$options$seed","sourceOptions","actualOptions","particles","move","path","canvas","seed","getRandom","zLayers","addEventListener"],"sourceRoot":""}