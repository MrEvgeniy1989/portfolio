{"version":3,"file":"static/js/7975.6e08cb8e.chunk.js","mappings":"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","sources":["../node_modules/.pnpm/@tsparticles+path-curves@3.3.0/node_modules/@tsparticles/path-curves/browser/CurvesPathGenerator.js","../node_modules/.pnpm/@tsparticles+path-curves@3.3.0/node_modules/@tsparticles/path-curves/browser/Curves.js"],"sourcesContent":["import { Vector, getRandom, isFunction, isString } from \"@tsparticles/engine\";\nimport { CurvesPathGen } from \"./Curves.js\";\nconst double = 2, doublePI = Math.PI * double;\nfunction randomVelocity() {\n    const offset = 0.8, factor = 0.6;\n    return getRandom() * factor + offset;\n}\nexport class CurvesPathGenerator {\n    constructor() {\n        this.options = {\n            rndFunc: null,\n            period: 100,\n            nbHarmonics: 2,\n            attenHarmonics: 0.8,\n            lowValue: -0.03,\n            highValue: 0.03,\n        };\n    }\n    generate(p) {\n        if (!p.pathGen) {\n            const options = this.options;\n            p.pathGen = CurvesPathGen(options.rndFunc, options.period, options.nbHarmonics, options.attenHarmonics, options.lowValue, options.highValue);\n        }\n        if (!p.curveVelocity) {\n            p.curveVelocity = Vector.origin;\n            p.curveVelocity.length = randomVelocity();\n            p.curveVelocity.angle = getRandom() * doublePI;\n        }\n        else {\n            p.curveVelocity.length += 0.01;\n            p.curveVelocity.angle = (p.curveVelocity.angle + p.pathGen()) % doublePI;\n        }\n        p.velocity.x = 0;\n        p.velocity.y = 0;\n        return p.curveVelocity;\n    }\n    init(container) {\n        const sourceOptions = container.actualOptions.particles.move.path.options, { options } = this;\n        if (isFunction(sourceOptions.rndFunc)) {\n            options.rndFunc = sourceOptions.rndFunc;\n        }\n        else if (isString(sourceOptions.rndFunc)) {\n            options.rndFunc =\n                window[sourceOptions.rndFunc] ?? this.options.rndFunc;\n        }\n        options.period = sourceOptions.period ?? options.period;\n        options.nbHarmonics = sourceOptions.nbHarmonics ?? options.nbHarmonics;\n        options.attenHarmonics = sourceOptions.attenHarmonics ?? options.attenHarmonics;\n        options.lowValue = sourceOptions.lowValue ?? options.lowValue;\n        options.highValue = sourceOptions.highValue ?? options.highValue;\n    }\n    reset(particle) {\n        delete particle.pathGen;\n        delete particle.curveVelocity;\n    }\n    update() {\n    }\n}\n","import { getRandom } from \"@tsparticles/engine\";\nexport function CurvesPathGen(rndFunc, period, nbHarmonics, attenHarmonics, lowValue = 0, highValue = 1) {\n    const arP0 = [], arP1 = [], amplitudes = [], increments = [], phases = [], randomFunc = rndFunc ?? getRandom;\n    let globAmplitude = 0;\n    if (nbHarmonics < 1)\n        nbHarmonics = 1;\n    for (let kh = 1; kh <= nbHarmonics; ++kh) {\n        arP0[kh] = randomFunc();\n        arP1[kh] = randomFunc();\n        amplitudes[kh] = kh === 1 ? 1 : amplitudes[kh - 1] * attenHarmonics;\n        globAmplitude += amplitudes[kh];\n        increments[kh] = kh / period;\n        phases[kh] = randomFunc();\n    }\n    amplitudes.forEach((value, kh) => (amplitudes[kh] = (value / globAmplitude) * (highValue - lowValue)));\n    return () => {\n        let pf, pfl, signal = 0;\n        for (let kh = nbHarmonics; kh >= 1; --kh) {\n            pf = phases[kh] += increments[kh];\n            if (phases[kh] >= 1) {\n                pf = phases[kh] -= 1;\n                arP0[kh] = arP1[kh];\n                arP1[kh] = randomFunc();\n            }\n            pfl = pf ** 2 * (3 - 2 * pf);\n            signal += (arP0[kh] * (1 - pfl) + arP1[kh] * pfl) * amplitudes[kh];\n        }\n        return signal + lowValue;\n    };\n}\n"],"names":["doublePI","Math","PI","CurvesPathGenerator","constructor","this","options","rndFunc","period","nbHarmonics","attenHarmonics","lowValue","highValue","generate","p","pathGen","arguments","length","undefined","arP0","arP1","amplitudes","increments","phases","randomFunc","getRandom","globAmplitude","kh","forEach","value","pf","pfl","signal","CurvesPathGen","curveVelocity","angle","Vector","origin","velocity","x","y","init","container","_sourceOptions$period","_sourceOptions$nbHarm","_sourceOptions$attenH","_sourceOptions$lowVal","_sourceOptions$highVa","sourceOptions","actualOptions","particles","move","path","isFunction","isString","_window$sourceOptions","window","reset","particle","update"],"sourceRoot":""}